# -*- mode: makefile -*-
# Generated for win at Thu Jan 19 13:32:56 2012.
# DO NOT EDIT! IT WILL BE OVERWRITTEN ON NEXT RUN!
#
# Command: ./SCRIPTS/buildbot/make-generator.py -o Makefile.win win
#
# Packages used:
#   - evil
#   - eina
#   - eet
#   - evas
#   - ecore
#   - efreet
#   - python-evas
#   - python-ecore
#   - embryo
#   - edje
#   - python-edje

SRCROOT = $(shell pwd)
BUILDROOT = $(shell pwd)/build
INSTALLROOT = $(shell pwd)/install
MAKEOPTS = --print-directory -j2
V=@

.DEFAULT: missing-target
.PHONY: missing-target help all clean evil-compile evil-clean evil-dependencies evil-install evil-test evil-doc evil-distcheck evil-all-users-compile evil-direct-users-compile eina-compile eina-clean eina-dependencies eina-install eina-test eina-doc eina-distcheck eina-all-users-compile eina-direct-users-compile eet-compile eet-clean eet-dependencies eet-install eet-test eet-doc eet-distcheck eet-all-users-compile eet-direct-users-compile evas-compile evas-clean evas-dependencies evas-install evas-test evas-doc evas-distcheck evas-all-users-compile evas-direct-users-compile ecore-compile ecore-clean ecore-dependencies ecore-install ecore-test ecore-doc ecore-distcheck ecore-all-users-compile ecore-direct-users-compile efreet-compile efreet-clean efreet-dependencies efreet-install efreet-test efreet-doc efreet-distcheck efreet-all-users-compile efreet-direct-users-compile python-evas-compile python-evas-clean python-evas-dependencies python-evas-install python-evas-test python-evas-doc python-evas-distcheck python-evas-all-users-compile python-evas-direct-users-compile python-ecore-compile python-ecore-clean python-ecore-dependencies python-ecore-install python-ecore-test python-ecore-doc python-ecore-distcheck python-ecore-all-users-compile python-ecore-direct-users-compile embryo-compile embryo-clean embryo-dependencies embryo-install embryo-test embryo-doc embryo-distcheck embryo-all-users-compile embryo-direct-users-compile edje-compile edje-clean edje-dependencies edje-install edje-test edje-doc edje-distcheck edje-all-users-compile edje-direct-users-compile python-edje-compile python-edje-clean python-edje-dependencies python-edje-install python-edje-test python-edje-doc python-edje-distcheck python-edje-all-users-compile python-edje-direct-users-compile

missing-target:
	@echo "Missing target."
	@exit 1

help:
	@echo "Variables:"
	@echo "   SRCROOT=absolute-path        where sources are located."
	@echo "   BUILDROOT=absolute-path      where to store built files."
	@echo "   INSTALLROOT=absolute-path    where to install built files."
	@echo ""
	@echo "Toplevel Targets:"
	@echo "   clean                        remove all built files."
	@echo "   all                          compile all packages."
	@echo "   test                         test all packages."
	@echo "   doc                          generate docs for all packages."
	@echo "   distcheck                    check distribution of all packages."
	@echo ""
	@echo "Package Targets:"
	@echo "   PACKAGE-compile              compile package."
	@echo "   PACKAGE-clean                remove all built files."
	@echo "   PACKAGE-dependencies         compile and install package dependencies."
	@echo "   PACKAGE-install              install package to \$$INSTALLROOT"
	@echo "   PACKAGE-test                 test package."
	@echo "   PACKAGE-doc                  generated documentation."
	@echo "   PACKAGE-distcheck            check package distribution."
	@echo "   PACKAGE-all-users-compile    compile all users of package."
	@echo "   PACKAGE-direct-users-compile compile all direct users of package."
	@echo ""
	@echo "Known packages:"
	@echo "   evil eina eet evas ecore efreet python-evas python-ecore embryo edje python-edje"
	@echo ""

all: evil-compile eina-compile eet-compile evas-compile ecore-compile efreet-compile python-evas-compile python-ecore-compile embryo-compile edje-compile python-edje-compile
clean: evil-clean eina-clean eet-clean evas-clean ecore-clean efreet-clean python-evas-clean python-ecore-clean embryo-clean edje-clean python-edje-clean
test: evil-test eina-test eet-test evas-test ecore-test efreet-test python-evas-test python-ecore-test embryo-test edje-test python-edje-test
doc: evil-doc eina-doc eet-doc evas-doc ecore-doc efreet-doc python-evas-doc python-ecore-doc embryo-doc edje-doc python-edje-doc
distcheck: evil-distcheck eina-distcheck eet-distcheck evas-distcheck ecore-distcheck efreet-distcheck python-evas-distcheck python-ecore-distcheck embryo-distcheck edje-distcheck python-edje-distcheck

########################################################################
# evil rules
evil-dependencies: $(BUILDROOT)/evil/stamps/dependencies 
$(BUILDROOT)/evil/stamps/dependencies: 
	$(V)mkdir -p $(BUILDROOT)/evil/stamps
	touch $(BUILDROOT)/evil/stamps/dependencies

evil-clean:
	if test -d $(BUILDROOT)/evil/compile; then chmod -R u+w $(BUILDROOT)/evil/compile; fi
	rm -fr $(BUILDROOT)/evil/compile
	rm -fr $(BUILDROOT)/evil/stamps

$(BUILDROOT)/evil/stamps/autogen: $(SRCROOT)/evil/autogen.sh $(SRCROOT)/evil/configure.ac
	$(V)echo "Running 'autogen.sh' for evil..."
	$(V)rm -f $(BUILDROOT)/evil/stamps/autogen
	cd $(SRCROOT)/evil && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/evil/stamps
	touch $(BUILDROOT)/evil/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for evil."

$(BUILDROOT)/evil/stamps/configure: $(BUILDROOT)/evil/stamps/autogen $(BUILDROOT)/evil/stamps/dependencies
	$(V)echo "Configuring evil..."
	$(V)rm -f $(BUILDROOT)/evil/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/evil/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/evil/compile && \
	$(SRCROOT)/evil/configure --prefix=$(INSTALLROOT) 
	$(V)mkdir -p $(BUILDROOT)/evil/stamps
	touch $(BUILDROOT)/evil/stamps/configure
	$(V)echo "Success configuring evil."

$(BUILDROOT)/evil/stamps/compile: $(BUILDROOT)/evil/stamps/configure evil-compile
evil-compile: $(BUILDROOT)/evil/stamps/configure
	$(V)echo "Compiling evil..."
	$(V)rm -f $(BUILDROOT)/evil/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/evil/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/evil/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/evil/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/evil/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/evil/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/evil/compile;\
	else\
		echo "evil is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/evil/stamps/compile -o -f $(BUILDROOT)/evil/stamps/compile-updated; then\
		touch $(BUILDROOT)/evil/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling evil."

$(BUILDROOT)/evil/stamps/install: $(BUILDROOT)/evil/stamps/compile evil-install
evil-install: $(BUILDROOT)/evil/stamps/compile
	$(V)echo "Installing evil..."
	$(V)if test ! -f $(BUILDROOT)/evil/stamps/install -o $(BUILDROOT)/evil/stamps/compile -nt $(BUILDROOT)/evil/stamps/install; then\
		rm -f $(BUILDROOT)/evil/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/evil/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/evil/compile;\
		mkdir -p $(BUILDROOT)/evil/stamps;\
		touch $(BUILDROOT)/evil/stamps/install;\
	else\
		echo "evil did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing evil."

$(BUILDROOT)/evil/stamps/test: $(BUILDROOT)/evil/stamps/compile evil-test
evil-test: $(BUILDROOT)/evil/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/evil/stamps
	touch $(BUILDROOT)/evil/stamps/test
	$(V)echo 'No test target defined for evil'

$(BUILDROOT)/evil/stamps/doc: $(BUILDROOT)/evil/stamps/compile evil-doc
evil-doc: $(BUILDROOT)/evil/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/evil/stamps
	touch $(BUILDROOT)/evil/stamps/doc
	$(V)echo 'No doc target defined for evil'

$(BUILDROOT)/evil/stamps/distcheck: $(BUILDROOT)/evil/stamps/compile evil-distcheck
evil-distcheck: $(BUILDROOT)/evil/stamps/compile
	$(V)echo "Checking distribution evil..."
	$(V)rm -f $(BUILDROOT)/evil/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/evil/compile
	$(V)mkdir -p $(BUILDROOT)/evil/stamps
	touch $(BUILDROOT)/evil/stamps/distcheck
	$(V)echo "Success checking distribution evil."

evil-direct-users-compile: embryo-compile edje-compile eet-compile efreet-compile eina-compile evas-compile ecore-compile

evil-all-users-compile: embryo-compile edje-compile python-evas-compile evas-compile python-edje-compile efreet-compile eina-compile eet-compile ecore-compile python-ecore-compile

########################################################################
# eina rules
eina-dependencies: $(BUILDROOT)/eina/stamps/dependencies evil-install
$(BUILDROOT)/eina/stamps/dependencies: $(BUILDROOT)/evil/stamps/install
	$(V)mkdir -p $(BUILDROOT)/eina/stamps
	touch $(BUILDROOT)/eina/stamps/dependencies

eina-clean:
	if test -d $(BUILDROOT)/eina/compile; then chmod -R u+w $(BUILDROOT)/eina/compile; fi
	rm -fr $(BUILDROOT)/eina/compile
	rm -fr $(BUILDROOT)/eina/stamps

$(BUILDROOT)/eina/stamps/autogen: $(SRCROOT)/eina/autogen.sh $(SRCROOT)/eina/configure.ac
	$(V)echo "Running 'autogen.sh' for eina..."
	$(V)rm -f $(BUILDROOT)/eina/stamps/autogen
	cd $(SRCROOT)/eina && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/eina/stamps
	touch $(BUILDROOT)/eina/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for eina."

$(BUILDROOT)/eina/stamps/configure: $(BUILDROOT)/eina/stamps/autogen $(BUILDROOT)/eina/stamps/dependencies
	$(V)echo "Configuring eina..."
	$(V)rm -f $(BUILDROOT)/eina/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/eina/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/eina/compile && \
	$(SRCROOT)/eina/configure --prefix=$(INSTALLROOT) --enable-doc \
		--enable-tests \
		--enable-benchmark \
		--disable-benchmark-glib
	$(V)mkdir -p $(BUILDROOT)/eina/stamps
	touch $(BUILDROOT)/eina/stamps/configure
	$(V)echo "Success configuring eina."

$(BUILDROOT)/eina/stamps/compile: $(BUILDROOT)/eina/stamps/configure eina-compile
eina-compile: $(BUILDROOT)/eina/stamps/configure
	$(V)echo "Compiling eina..."
	$(V)rm -f $(BUILDROOT)/eina/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/eina/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/eina/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/eina/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/eina/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/eina/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/eina/compile;\
	else\
		echo "eina is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/eina/stamps/compile -o -f $(BUILDROOT)/eina/stamps/compile-updated; then\
		touch $(BUILDROOT)/eina/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling eina."

$(BUILDROOT)/eina/stamps/install: $(BUILDROOT)/eina/stamps/compile eina-install
eina-install: $(BUILDROOT)/eina/stamps/compile
	$(V)echo "Installing eina..."
	$(V)if test ! -f $(BUILDROOT)/eina/stamps/install -o $(BUILDROOT)/eina/stamps/compile -nt $(BUILDROOT)/eina/stamps/install; then\
		rm -f $(BUILDROOT)/eina/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/eina/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/eina/compile;\
		mkdir -p $(BUILDROOT)/eina/stamps;\
		touch $(BUILDROOT)/eina/stamps/install;\
	else\
		echo "eina did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing eina."

$(BUILDROOT)/eina/stamps/test: $(BUILDROOT)/eina/stamps/compile eina-test
eina-test: $(BUILDROOT)/eina/stamps/compile
	$(V)echo "Testing (make check) eina..."
	$(V)rm -f $(BUILDROOT)/eina/stamps/test
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) check -C $(BUILDROOT)/eina/compile
	$(V)mkdir -p $(BUILDROOT)/eina/stamps
	touch $(BUILDROOT)/eina/stamps/test
	$(V)echo "Success testing (make check) eina."

$(BUILDROOT)/eina/stamps/doc: $(BUILDROOT)/eina/stamps/compile eina-doc
eina-doc: $(BUILDROOT)/eina/stamps/compile
	$(V)echo "Generating documentation (make doc) eina..."
	$(V)rm -f $(BUILDROOT)/eina/stamps/doc
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) doc -C $(BUILDROOT)/eina/compile
	$(V)mkdir -p $(BUILDROOT)/eina/stamps
	touch $(BUILDROOT)/eina/stamps/doc
	$(V)echo "Success generating documentation (make doc) eina."

$(BUILDROOT)/eina/stamps/distcheck: $(BUILDROOT)/eina/stamps/compile eina-distcheck
eina-distcheck: $(BUILDROOT)/eina/stamps/compile
	$(V)echo "Checking distribution eina..."
	$(V)rm -f $(BUILDROOT)/eina/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/eina/compile
	$(V)mkdir -p $(BUILDROOT)/eina/stamps
	touch $(BUILDROOT)/eina/stamps/distcheck
	$(V)echo "Success checking distribution eina."

eina-direct-users-compile: embryo-compile edje-compile eet-compile efreet-compile evas-compile ecore-compile

eina-all-users-compile: embryo-compile edje-compile python-evas-compile evas-compile python-edje-compile efreet-compile eet-compile ecore-compile python-ecore-compile

########################################################################
# eet rules
eet-dependencies: $(BUILDROOT)/eet/stamps/dependencies eina-install evil-install
$(BUILDROOT)/eet/stamps/dependencies: $(BUILDROOT)/eina/stamps/install $(BUILDROOT)/evil/stamps/install
	$(V)mkdir -p $(BUILDROOT)/eet/stamps
	touch $(BUILDROOT)/eet/stamps/dependencies

eet-clean:
	if test -d $(BUILDROOT)/eet/compile; then chmod -R u+w $(BUILDROOT)/eet/compile; fi
	rm -fr $(BUILDROOT)/eet/compile
	rm -fr $(BUILDROOT)/eet/stamps

$(BUILDROOT)/eet/stamps/autogen: $(SRCROOT)/eet/autogen.sh $(SRCROOT)/eet/configure.ac
	$(V)echo "Running 'autogen.sh' for eet..."
	$(V)rm -f $(BUILDROOT)/eet/stamps/autogen
	cd $(SRCROOT)/eet && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/eet/stamps
	touch $(BUILDROOT)/eet/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for eet."

$(BUILDROOT)/eet/stamps/configure: $(BUILDROOT)/eet/stamps/autogen $(BUILDROOT)/eet/stamps/dependencies
	$(V)echo "Configuring eet..."
	$(V)rm -f $(BUILDROOT)/eet/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/eet/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/eet/compile && \
	$(SRCROOT)/eet/configure --prefix=$(INSTALLROOT) --enable-doc \
		--enable-tests \
		--enable-gnutls \
		--disable-openssl \
		--enable-cipher \
		--enable-signature \
		--enable-assert
	$(V)mkdir -p $(BUILDROOT)/eet/stamps
	touch $(BUILDROOT)/eet/stamps/configure
	$(V)echo "Success configuring eet."

$(BUILDROOT)/eet/stamps/compile: $(BUILDROOT)/eet/stamps/configure eet-compile
eet-compile: $(BUILDROOT)/eet/stamps/configure
	$(V)echo "Compiling eet..."
	$(V)rm -f $(BUILDROOT)/eet/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/eet/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/eet/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/eet/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/eet/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/eet/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/eet/compile;\
	else\
		echo "eet is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/eet/stamps/compile -o -f $(BUILDROOT)/eet/stamps/compile-updated; then\
		touch $(BUILDROOT)/eet/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling eet."

$(BUILDROOT)/eet/stamps/install: $(BUILDROOT)/eet/stamps/compile eet-install
eet-install: $(BUILDROOT)/eet/stamps/compile
	$(V)echo "Installing eet..."
	$(V)if test ! -f $(BUILDROOT)/eet/stamps/install -o $(BUILDROOT)/eet/stamps/compile -nt $(BUILDROOT)/eet/stamps/install; then\
		rm -f $(BUILDROOT)/eet/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/eet/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/eet/compile;\
		mkdir -p $(BUILDROOT)/eet/stamps;\
		touch $(BUILDROOT)/eet/stamps/install;\
	else\
		echo "eet did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing eet."

$(BUILDROOT)/eet/stamps/test: $(BUILDROOT)/eet/stamps/compile eet-test
eet-test: $(BUILDROOT)/eet/stamps/compile
	$(V)echo "Testing (make check) eet..."
	$(V)rm -f $(BUILDROOT)/eet/stamps/test
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) check -C $(BUILDROOT)/eet/compile
	$(V)mkdir -p $(BUILDROOT)/eet/stamps
	touch $(BUILDROOT)/eet/stamps/test
	$(V)echo "Success testing (make check) eet."

$(BUILDROOT)/eet/stamps/doc: $(BUILDROOT)/eet/stamps/compile eet-doc
eet-doc: $(BUILDROOT)/eet/stamps/compile
	$(V)echo "Generating documentation (make doc) eet..."
	$(V)rm -f $(BUILDROOT)/eet/stamps/doc
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) doc -C $(BUILDROOT)/eet/compile
	$(V)mkdir -p $(BUILDROOT)/eet/stamps
	touch $(BUILDROOT)/eet/stamps/doc
	$(V)echo "Success generating documentation (make doc) eet."

$(BUILDROOT)/eet/stamps/distcheck: $(BUILDROOT)/eet/stamps/compile eet-distcheck
eet-distcheck: $(BUILDROOT)/eet/stamps/compile
	$(V)echo "Checking distribution eet..."
	$(V)rm -f $(BUILDROOT)/eet/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/eet/compile
	$(V)mkdir -p $(BUILDROOT)/eet/stamps
	touch $(BUILDROOT)/eet/stamps/distcheck
	$(V)echo "Success checking distribution eet."

eet-direct-users-compile: edje-compile evas-compile efreet-compile

eet-all-users-compile: edje-compile python-evas-compile evas-compile python-edje-compile efreet-compile ecore-compile python-ecore-compile

########################################################################
# evas rules
evas-dependencies: $(BUILDROOT)/evas/stamps/dependencies eina-install evil-install eet-install
$(BUILDROOT)/evas/stamps/dependencies: $(BUILDROOT)/eina/stamps/install $(BUILDROOT)/evil/stamps/install $(BUILDROOT)/eet/stamps/install
	$(V)mkdir -p $(BUILDROOT)/evas/stamps
	touch $(BUILDROOT)/evas/stamps/dependencies

evas-clean:
	if test -d $(BUILDROOT)/evas/compile; then chmod -R u+w $(BUILDROOT)/evas/compile; fi
	rm -fr $(BUILDROOT)/evas/compile
	rm -fr $(BUILDROOT)/evas/stamps

$(BUILDROOT)/evas/stamps/autogen: $(SRCROOT)/evas/autogen.sh $(SRCROOT)/evas/configure.ac
	$(V)echo "Running 'autogen.sh' for evas..."
	$(V)rm -f $(BUILDROOT)/evas/stamps/autogen
	cd $(SRCROOT)/evas && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/evas/stamps
	touch $(BUILDROOT)/evas/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for evas."

$(BUILDROOT)/evas/stamps/configure: $(BUILDROOT)/evas/stamps/autogen $(BUILDROOT)/evas/stamps/dependencies
	$(V)echo "Configuring evas..."
	$(V)rm -f $(BUILDROOT)/evas/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/evas/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/evas/compile && \
	$(SRCROOT)/evas/configure --prefix=$(INSTALLROOT) --enable-doc \
		--enable-tests \
		--enable-buffer \
		--enable-convert-yuv \
		--enable-async-events \
		--enable-async-preload
	$(V)mkdir -p $(BUILDROOT)/evas/stamps
	touch $(BUILDROOT)/evas/stamps/configure
	$(V)echo "Success configuring evas."

$(BUILDROOT)/evas/stamps/compile: $(BUILDROOT)/evas/stamps/configure evas-compile
evas-compile: $(BUILDROOT)/evas/stamps/configure
	$(V)echo "Compiling evas..."
	$(V)rm -f $(BUILDROOT)/evas/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/evas/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/evas/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/evas/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/evas/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/evas/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/evas/compile;\
	else\
		echo "evas is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/evas/stamps/compile -o -f $(BUILDROOT)/evas/stamps/compile-updated; then\
		touch $(BUILDROOT)/evas/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling evas."

$(BUILDROOT)/evas/stamps/install: $(BUILDROOT)/evas/stamps/compile evas-install
evas-install: $(BUILDROOT)/evas/stamps/compile
	$(V)echo "Installing evas..."
	$(V)if test ! -f $(BUILDROOT)/evas/stamps/install -o $(BUILDROOT)/evas/stamps/compile -nt $(BUILDROOT)/evas/stamps/install; then\
		rm -f $(BUILDROOT)/evas/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/evas/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/evas/compile;\
		mkdir -p $(BUILDROOT)/evas/stamps;\
		touch $(BUILDROOT)/evas/stamps/install;\
	else\
		echo "evas did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing evas."

$(BUILDROOT)/evas/stamps/test: $(BUILDROOT)/evas/stamps/compile evas-test
evas-test: $(BUILDROOT)/evas/stamps/compile
	$(V)echo "Testing (make check) evas..."
	$(V)rm -f $(BUILDROOT)/evas/stamps/test
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) check -C $(BUILDROOT)/evas/compile
	$(V)mkdir -p $(BUILDROOT)/evas/stamps
	touch $(BUILDROOT)/evas/stamps/test
	$(V)echo "Success testing (make check) evas."

$(BUILDROOT)/evas/stamps/doc: $(BUILDROOT)/evas/stamps/compile evas-doc
evas-doc: $(BUILDROOT)/evas/stamps/compile
	$(V)echo "Generating documentation (make doc) evas..."
	$(V)rm -f $(BUILDROOT)/evas/stamps/doc
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) doc -C $(BUILDROOT)/evas/compile
	$(V)mkdir -p $(BUILDROOT)/evas/stamps
	touch $(BUILDROOT)/evas/stamps/doc
	$(V)echo "Success generating documentation (make doc) evas."

$(BUILDROOT)/evas/stamps/distcheck: $(BUILDROOT)/evas/stamps/compile evas-distcheck
evas-distcheck: $(BUILDROOT)/evas/stamps/compile
	$(V)echo "Checking distribution evas..."
	$(V)rm -f $(BUILDROOT)/evas/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/evas/compile
	$(V)mkdir -p $(BUILDROOT)/evas/stamps
	touch $(BUILDROOT)/evas/stamps/distcheck
	$(V)echo "Success checking distribution evas."

evas-direct-users-compile: edje-compile python-evas-compile ecore-compile

evas-all-users-compile: edje-compile python-evas-compile python-edje-compile efreet-compile python-ecore-compile ecore-compile

########################################################################
# ecore rules
ecore-dependencies: $(BUILDROOT)/ecore/stamps/dependencies eina-install evil-install evas-install
$(BUILDROOT)/ecore/stamps/dependencies: $(BUILDROOT)/eina/stamps/install $(BUILDROOT)/evil/stamps/install $(BUILDROOT)/evas/stamps/install
	$(V)mkdir -p $(BUILDROOT)/ecore/stamps
	touch $(BUILDROOT)/ecore/stamps/dependencies

ecore-clean:
	if test -d $(BUILDROOT)/ecore/compile; then chmod -R u+w $(BUILDROOT)/ecore/compile; fi
	rm -fr $(BUILDROOT)/ecore/compile
	rm -fr $(BUILDROOT)/ecore/stamps

$(BUILDROOT)/ecore/stamps/autogen: $(SRCROOT)/ecore/autogen.sh $(SRCROOT)/ecore/configure.ac
	$(V)echo "Running 'autogen.sh' for ecore..."
	$(V)rm -f $(BUILDROOT)/ecore/stamps/autogen
	cd $(SRCROOT)/ecore && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/ecore/stamps
	touch $(BUILDROOT)/ecore/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for ecore."

$(BUILDROOT)/ecore/stamps/configure: $(BUILDROOT)/ecore/stamps/autogen $(BUILDROOT)/ecore/stamps/dependencies
	$(V)echo "Configuring ecore..."
	$(V)rm -f $(BUILDROOT)/ecore/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/ecore/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/ecore/compile && \
	$(SRCROOT)/ecore/configure --prefix=$(INSTALLROOT) --enable-tests \
		--enable-doc \
		--enable-thread-safety \
		--enable-ecore-evas \
		--enable-ecore-evas-software-buffer \
		--enable-ecore-imf \
		--enable-ecore-imf-evas \
		--enable-ecore-input \
		--enable-ecore-input-evas
	$(V)mkdir -p $(BUILDROOT)/ecore/stamps
	touch $(BUILDROOT)/ecore/stamps/configure
	$(V)echo "Success configuring ecore."

$(BUILDROOT)/ecore/stamps/compile: $(BUILDROOT)/ecore/stamps/configure ecore-compile
ecore-compile: $(BUILDROOT)/ecore/stamps/configure
	$(V)echo "Compiling ecore..."
	$(V)rm -f $(BUILDROOT)/ecore/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/ecore/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/ecore/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/ecore/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/ecore/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/ecore/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/ecore/compile;\
	else\
		echo "ecore is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/ecore/stamps/compile -o -f $(BUILDROOT)/ecore/stamps/compile-updated; then\
		touch $(BUILDROOT)/ecore/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling ecore."

$(BUILDROOT)/ecore/stamps/install: $(BUILDROOT)/ecore/stamps/compile ecore-install
ecore-install: $(BUILDROOT)/ecore/stamps/compile
	$(V)echo "Installing ecore..."
	$(V)if test ! -f $(BUILDROOT)/ecore/stamps/install -o $(BUILDROOT)/ecore/stamps/compile -nt $(BUILDROOT)/ecore/stamps/install; then\
		rm -f $(BUILDROOT)/ecore/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/ecore/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/ecore/compile;\
		mkdir -p $(BUILDROOT)/ecore/stamps;\
		touch $(BUILDROOT)/ecore/stamps/install;\
	else\
		echo "ecore did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing ecore."

$(BUILDROOT)/ecore/stamps/test: $(BUILDROOT)/ecore/stamps/compile ecore-test
ecore-test: $(BUILDROOT)/ecore/stamps/compile
	$(V)echo "Testing (make check) ecore..."
	$(V)rm -f $(BUILDROOT)/ecore/stamps/test
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) check -C $(BUILDROOT)/ecore/compile
	$(V)mkdir -p $(BUILDROOT)/ecore/stamps
	touch $(BUILDROOT)/ecore/stamps/test
	$(V)echo "Success testing (make check) ecore."

$(BUILDROOT)/ecore/stamps/doc: $(BUILDROOT)/ecore/stamps/compile ecore-doc
ecore-doc: $(BUILDROOT)/ecore/stamps/compile
	$(V)echo "Generating documentation (make doc) ecore..."
	$(V)rm -f $(BUILDROOT)/ecore/stamps/doc
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) doc -C $(BUILDROOT)/ecore/compile
	$(V)mkdir -p $(BUILDROOT)/ecore/stamps
	touch $(BUILDROOT)/ecore/stamps/doc
	$(V)echo "Success generating documentation (make doc) ecore."

$(BUILDROOT)/ecore/stamps/distcheck: $(BUILDROOT)/ecore/stamps/compile ecore-distcheck
ecore-distcheck: $(BUILDROOT)/ecore/stamps/compile
	$(V)echo "Checking distribution ecore..."
	$(V)rm -f $(BUILDROOT)/ecore/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/ecore/compile
	$(V)mkdir -p $(BUILDROOT)/ecore/stamps
	touch $(BUILDROOT)/ecore/stamps/distcheck
	$(V)echo "Success checking distribution ecore."

ecore-direct-users-compile: edje-compile python-ecore-compile efreet-compile

ecore-all-users-compile: edje-compile python-ecore-compile python-edje-compile efreet-compile

########################################################################
# efreet rules
efreet-dependencies: $(BUILDROOT)/efreet/stamps/dependencies eina-install ecore-install evil-install eet-install
$(BUILDROOT)/efreet/stamps/dependencies: $(BUILDROOT)/eina/stamps/install $(BUILDROOT)/ecore/stamps/install $(BUILDROOT)/evil/stamps/install $(BUILDROOT)/eet/stamps/install
	$(V)mkdir -p $(BUILDROOT)/efreet/stamps
	touch $(BUILDROOT)/efreet/stamps/dependencies

efreet-clean:
	if test -d $(BUILDROOT)/efreet/compile; then chmod -R u+w $(BUILDROOT)/efreet/compile; fi
	rm -fr $(BUILDROOT)/efreet/compile
	rm -fr $(BUILDROOT)/efreet/stamps

$(BUILDROOT)/efreet/stamps/autogen: $(SRCROOT)/efreet/autogen.sh $(SRCROOT)/efreet/configure.ac
	$(V)echo "Running 'autogen.sh' for efreet..."
	$(V)rm -f $(BUILDROOT)/efreet/stamps/autogen
	cd $(SRCROOT)/efreet && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/efreet/stamps
	touch $(BUILDROOT)/efreet/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for efreet."

$(BUILDROOT)/efreet/stamps/configure: $(BUILDROOT)/efreet/stamps/autogen $(BUILDROOT)/efreet/stamps/dependencies
	$(V)echo "Configuring efreet..."
	$(V)rm -f $(BUILDROOT)/efreet/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/efreet/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/efreet/compile && \
	$(SRCROOT)/efreet/configure --prefix=$(INSTALLROOT) --enable-tests \
		--enable-doc
	$(V)mkdir -p $(BUILDROOT)/efreet/stamps
	touch $(BUILDROOT)/efreet/stamps/configure
	$(V)echo "Success configuring efreet."

$(BUILDROOT)/efreet/stamps/compile: $(BUILDROOT)/efreet/stamps/configure efreet-compile
efreet-compile: $(BUILDROOT)/efreet/stamps/configure
	$(V)echo "Compiling efreet..."
	$(V)rm -f $(BUILDROOT)/efreet/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/efreet/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/efreet/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/efreet/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/efreet/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/efreet/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/efreet/compile;\
	else\
		echo "efreet is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/efreet/stamps/compile -o -f $(BUILDROOT)/efreet/stamps/compile-updated; then\
		touch $(BUILDROOT)/efreet/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling efreet."

$(BUILDROOT)/efreet/stamps/install: $(BUILDROOT)/efreet/stamps/compile efreet-install
efreet-install: $(BUILDROOT)/efreet/stamps/compile
	$(V)echo "Installing efreet..."
	$(V)if test ! -f $(BUILDROOT)/efreet/stamps/install -o $(BUILDROOT)/efreet/stamps/compile -nt $(BUILDROOT)/efreet/stamps/install; then\
		rm -f $(BUILDROOT)/efreet/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/efreet/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/efreet/compile;\
		mkdir -p $(BUILDROOT)/efreet/stamps;\
		touch $(BUILDROOT)/efreet/stamps/install;\
	else\
		echo "efreet did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing efreet."

$(BUILDROOT)/efreet/stamps/test: $(BUILDROOT)/efreet/stamps/compile efreet-test
efreet-test: $(BUILDROOT)/efreet/stamps/compile
	$(V)echo "Testing (make check) efreet..."
	$(V)rm -f $(BUILDROOT)/efreet/stamps/test
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) check -C $(BUILDROOT)/efreet/compile
	$(V)mkdir -p $(BUILDROOT)/efreet/stamps
	touch $(BUILDROOT)/efreet/stamps/test
	$(V)echo "Success testing (make check) efreet."

$(BUILDROOT)/efreet/stamps/doc: $(BUILDROOT)/efreet/stamps/compile efreet-doc
efreet-doc: $(BUILDROOT)/efreet/stamps/compile
	$(V)echo "Generating documentation (make doc) efreet..."
	$(V)rm -f $(BUILDROOT)/efreet/stamps/doc
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) doc -C $(BUILDROOT)/efreet/compile
	$(V)mkdir -p $(BUILDROOT)/efreet/stamps
	touch $(BUILDROOT)/efreet/stamps/doc
	$(V)echo "Success generating documentation (make doc) efreet."

$(BUILDROOT)/efreet/stamps/distcheck: $(BUILDROOT)/efreet/stamps/compile efreet-distcheck
efreet-distcheck: $(BUILDROOT)/efreet/stamps/compile
	$(V)echo "Checking distribution efreet..."
	$(V)rm -f $(BUILDROOT)/efreet/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/efreet/compile
	$(V)mkdir -p $(BUILDROOT)/efreet/stamps
	touch $(BUILDROOT)/efreet/stamps/distcheck
	$(V)echo "Success checking distribution efreet."

efreet-direct-users-compile:

efreet-all-users-compile:

########################################################################
# python-evas rules
python-evas-dependencies: $(BUILDROOT)/python-evas/stamps/dependencies evas-install
$(BUILDROOT)/python-evas/stamps/dependencies: $(BUILDROOT)/evas/stamps/install
	$(V)mkdir -p $(BUILDROOT)/python-evas/stamps
	touch $(BUILDROOT)/python-evas/stamps/dependencies

python-evas-clean:
	if test -d $(BUILDROOT)/python-evas/compile; then chmod -R u+w $(BUILDROOT)/python-evas/compile; fi
	rm -fr $(BUILDROOT)/python-evas/compile
	rm -fr $(BUILDROOT)/python-evas/stamps

$(BUILDROOT)/python-evas/stamps/autogen: $(SRCROOT)/BINDINGS/python/python-evas/autogen.sh $(SRCROOT)/BINDINGS/python/python-evas/configure.ac
	$(V)echo "Running 'autogen.sh' for python-evas..."
	$(V)rm -f $(BUILDROOT)/python-evas/stamps/autogen
	cd $(SRCROOT)/BINDINGS/python/python-evas && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/python-evas/stamps
	touch $(BUILDROOT)/python-evas/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for python-evas."

$(BUILDROOT)/python-evas/stamps/configure: $(BUILDROOT)/python-evas/stamps/autogen $(BUILDROOT)/python-evas/stamps/dependencies
	$(V)echo "Configuring python-evas..."
	$(V)rm -f $(BUILDROOT)/python-evas/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/python-evas/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/python-evas/compile && \
	$(SRCROOT)/BINDINGS/python/python-evas/configure --prefix=$(INSTALLROOT) 
	$(V)mkdir -p $(BUILDROOT)/python-evas/stamps
	touch $(BUILDROOT)/python-evas/stamps/configure
	$(V)echo "Success configuring python-evas."

$(BUILDROOT)/python-evas/stamps/compile: $(BUILDROOT)/python-evas/stamps/configure python-evas-compile
python-evas-compile: $(BUILDROOT)/python-evas/stamps/configure
	$(V)echo "Compiling python-evas..."
	$(V)rm -f $(BUILDROOT)/python-evas/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/python-evas/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/python-evas/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/python-evas/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/python-evas/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/python-evas/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/python-evas/compile;\
	else\
		echo "python-evas is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/python-evas/stamps/compile -o -f $(BUILDROOT)/python-evas/stamps/compile-updated; then\
		touch $(BUILDROOT)/python-evas/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling python-evas."

$(BUILDROOT)/python-evas/stamps/install: $(BUILDROOT)/python-evas/stamps/compile python-evas-install
python-evas-install: $(BUILDROOT)/python-evas/stamps/compile
	$(V)echo "Installing python-evas..."
	$(V)if test ! -f $(BUILDROOT)/python-evas/stamps/install -o $(BUILDROOT)/python-evas/stamps/compile -nt $(BUILDROOT)/python-evas/stamps/install; then\
		rm -f $(BUILDROOT)/python-evas/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/python-evas/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/python-evas/compile;\
		mkdir -p $(BUILDROOT)/python-evas/stamps;\
		touch $(BUILDROOT)/python-evas/stamps/install;\
	else\
		echo "python-evas did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing python-evas."

$(BUILDROOT)/python-evas/stamps/test: $(BUILDROOT)/python-evas/stamps/compile python-evas-test
python-evas-test: $(BUILDROOT)/python-evas/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/python-evas/stamps
	touch $(BUILDROOT)/python-evas/stamps/test
	$(V)echo 'No test target defined for python-evas'

$(BUILDROOT)/python-evas/stamps/doc: $(BUILDROOT)/python-evas/stamps/compile python-evas-doc
python-evas-doc: $(BUILDROOT)/python-evas/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/python-evas/stamps
	touch $(BUILDROOT)/python-evas/stamps/doc
	$(V)echo 'No doc target defined for python-evas'

$(BUILDROOT)/python-evas/stamps/distcheck: $(BUILDROOT)/python-evas/stamps/compile python-evas-distcheck
python-evas-distcheck: $(BUILDROOT)/python-evas/stamps/compile
	$(V)echo "Checking distribution python-evas..."
	$(V)rm -f $(BUILDROOT)/python-evas/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/python-evas/compile
	$(V)mkdir -p $(BUILDROOT)/python-evas/stamps
	touch $(BUILDROOT)/python-evas/stamps/distcheck
	$(V)echo "Success checking distribution python-evas."

python-evas-direct-users-compile: python-ecore-compile python-edje-compile

python-evas-all-users-compile: python-ecore-compile python-edje-compile

########################################################################
# python-ecore rules
python-ecore-dependencies: $(BUILDROOT)/python-ecore/stamps/dependencies ecore-install python-evas-install
$(BUILDROOT)/python-ecore/stamps/dependencies: $(BUILDROOT)/ecore/stamps/install $(BUILDROOT)/python-evas/stamps/install
	$(V)mkdir -p $(BUILDROOT)/python-ecore/stamps
	touch $(BUILDROOT)/python-ecore/stamps/dependencies

python-ecore-clean:
	if test -d $(BUILDROOT)/python-ecore/compile; then chmod -R u+w $(BUILDROOT)/python-ecore/compile; fi
	rm -fr $(BUILDROOT)/python-ecore/compile
	rm -fr $(BUILDROOT)/python-ecore/stamps

$(BUILDROOT)/python-ecore/stamps/autogen: $(SRCROOT)/BINDINGS/python/python-ecore/autogen.sh $(SRCROOT)/BINDINGS/python/python-ecore/configure.ac
	$(V)echo "Running 'autogen.sh' for python-ecore..."
	$(V)rm -f $(BUILDROOT)/python-ecore/stamps/autogen
	cd $(SRCROOT)/BINDINGS/python/python-ecore && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/python-ecore/stamps
	touch $(BUILDROOT)/python-ecore/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for python-ecore."

$(BUILDROOT)/python-ecore/stamps/configure: $(BUILDROOT)/python-ecore/stamps/autogen $(BUILDROOT)/python-ecore/stamps/dependencies
	$(V)echo "Configuring python-ecore..."
	$(V)rm -f $(BUILDROOT)/python-ecore/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/python-ecore/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/python-ecore/compile && \
	$(SRCROOT)/BINDINGS/python/python-ecore/configure --prefix=$(INSTALLROOT) --enable-ecore-file \
		--enable-ecore-evas \
		--enable-ecore-win32
	$(V)mkdir -p $(BUILDROOT)/python-ecore/stamps
	touch $(BUILDROOT)/python-ecore/stamps/configure
	$(V)echo "Success configuring python-ecore."

$(BUILDROOT)/python-ecore/stamps/compile: $(BUILDROOT)/python-ecore/stamps/configure python-ecore-compile
python-ecore-compile: $(BUILDROOT)/python-ecore/stamps/configure
	$(V)echo "Compiling python-ecore..."
	$(V)rm -f $(BUILDROOT)/python-ecore/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/python-ecore/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/python-ecore/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/python-ecore/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/python-ecore/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/python-ecore/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/python-ecore/compile;\
	else\
		echo "python-ecore is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/python-ecore/stamps/compile -o -f $(BUILDROOT)/python-ecore/stamps/compile-updated; then\
		touch $(BUILDROOT)/python-ecore/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling python-ecore."

$(BUILDROOT)/python-ecore/stamps/install: $(BUILDROOT)/python-ecore/stamps/compile python-ecore-install
python-ecore-install: $(BUILDROOT)/python-ecore/stamps/compile
	$(V)echo "Installing python-ecore..."
	$(V)if test ! -f $(BUILDROOT)/python-ecore/stamps/install -o $(BUILDROOT)/python-ecore/stamps/compile -nt $(BUILDROOT)/python-ecore/stamps/install; then\
		rm -f $(BUILDROOT)/python-ecore/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/python-ecore/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/python-ecore/compile;\
		mkdir -p $(BUILDROOT)/python-ecore/stamps;\
		touch $(BUILDROOT)/python-ecore/stamps/install;\
	else\
		echo "python-ecore did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing python-ecore."

$(BUILDROOT)/python-ecore/stamps/test: $(BUILDROOT)/python-ecore/stamps/compile python-ecore-test
python-ecore-test: $(BUILDROOT)/python-ecore/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/python-ecore/stamps
	touch $(BUILDROOT)/python-ecore/stamps/test
	$(V)echo 'No test target defined for python-ecore'

$(BUILDROOT)/python-ecore/stamps/doc: $(BUILDROOT)/python-ecore/stamps/compile python-ecore-doc
python-ecore-doc: $(BUILDROOT)/python-ecore/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/python-ecore/stamps
	touch $(BUILDROOT)/python-ecore/stamps/doc
	$(V)echo 'No doc target defined for python-ecore'

$(BUILDROOT)/python-ecore/stamps/distcheck: $(BUILDROOT)/python-ecore/stamps/compile python-ecore-distcheck
python-ecore-distcheck: $(BUILDROOT)/python-ecore/stamps/compile
	$(V)echo "Checking distribution python-ecore..."
	$(V)rm -f $(BUILDROOT)/python-ecore/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/python-ecore/compile
	$(V)mkdir -p $(BUILDROOT)/python-ecore/stamps
	touch $(BUILDROOT)/python-ecore/stamps/distcheck
	$(V)echo "Success checking distribution python-ecore."

python-ecore-direct-users-compile:

python-ecore-all-users-compile:

########################################################################
# embryo rules
embryo-dependencies: $(BUILDROOT)/embryo/stamps/dependencies eina-install evil-install
$(BUILDROOT)/embryo/stamps/dependencies: $(BUILDROOT)/eina/stamps/install $(BUILDROOT)/evil/stamps/install
	$(V)mkdir -p $(BUILDROOT)/embryo/stamps
	touch $(BUILDROOT)/embryo/stamps/dependencies

embryo-clean:
	if test -d $(BUILDROOT)/embryo/compile; then chmod -R u+w $(BUILDROOT)/embryo/compile; fi
	rm -fr $(BUILDROOT)/embryo/compile
	rm -fr $(BUILDROOT)/embryo/stamps

$(BUILDROOT)/embryo/stamps/autogen: $(SRCROOT)/embryo/autogen.sh $(SRCROOT)/embryo/configure.ac
	$(V)echo "Running 'autogen.sh' for embryo..."
	$(V)rm -f $(BUILDROOT)/embryo/stamps/autogen
	cd $(SRCROOT)/embryo && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/embryo/stamps
	touch $(BUILDROOT)/embryo/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for embryo."

$(BUILDROOT)/embryo/stamps/configure: $(BUILDROOT)/embryo/stamps/autogen $(BUILDROOT)/embryo/stamps/dependencies
	$(V)echo "Configuring embryo..."
	$(V)rm -f $(BUILDROOT)/embryo/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/embryo/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/embryo/compile && \
	$(SRCROOT)/embryo/configure --prefix=$(INSTALLROOT) 
	$(V)mkdir -p $(BUILDROOT)/embryo/stamps
	touch $(BUILDROOT)/embryo/stamps/configure
	$(V)echo "Success configuring embryo."

$(BUILDROOT)/embryo/stamps/compile: $(BUILDROOT)/embryo/stamps/configure embryo-compile
embryo-compile: $(BUILDROOT)/embryo/stamps/configure
	$(V)echo "Compiling embryo..."
	$(V)rm -f $(BUILDROOT)/embryo/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/embryo/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/embryo/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/embryo/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/embryo/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/embryo/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/embryo/compile;\
	else\
		echo "embryo is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/embryo/stamps/compile -o -f $(BUILDROOT)/embryo/stamps/compile-updated; then\
		touch $(BUILDROOT)/embryo/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling embryo."

$(BUILDROOT)/embryo/stamps/install: $(BUILDROOT)/embryo/stamps/compile embryo-install
embryo-install: $(BUILDROOT)/embryo/stamps/compile
	$(V)echo "Installing embryo..."
	$(V)if test ! -f $(BUILDROOT)/embryo/stamps/install -o $(BUILDROOT)/embryo/stamps/compile -nt $(BUILDROOT)/embryo/stamps/install; then\
		rm -f $(BUILDROOT)/embryo/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/embryo/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/embryo/compile;\
		mkdir -p $(BUILDROOT)/embryo/stamps;\
		touch $(BUILDROOT)/embryo/stamps/install;\
	else\
		echo "embryo did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing embryo."

$(BUILDROOT)/embryo/stamps/test: $(BUILDROOT)/embryo/stamps/compile embryo-test
embryo-test: $(BUILDROOT)/embryo/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/embryo/stamps
	touch $(BUILDROOT)/embryo/stamps/test
	$(V)echo 'No test target defined for embryo'

$(BUILDROOT)/embryo/stamps/doc: $(BUILDROOT)/embryo/stamps/compile embryo-doc
embryo-doc: $(BUILDROOT)/embryo/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/embryo/stamps
	touch $(BUILDROOT)/embryo/stamps/doc
	$(V)echo 'No doc target defined for embryo'

$(BUILDROOT)/embryo/stamps/distcheck: $(BUILDROOT)/embryo/stamps/compile embryo-distcheck
embryo-distcheck: $(BUILDROOT)/embryo/stamps/compile
	$(V)echo "Checking distribution embryo..."
	$(V)rm -f $(BUILDROOT)/embryo/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/embryo/compile
	$(V)mkdir -p $(BUILDROOT)/embryo/stamps
	touch $(BUILDROOT)/embryo/stamps/distcheck
	$(V)echo "Success checking distribution embryo."

embryo-direct-users-compile: edje-compile

embryo-all-users-compile: edje-compile python-edje-compile

########################################################################
# edje rules
edje-dependencies: $(BUILDROOT)/edje/stamps/dependencies embryo-install evas-install evil-install eina-install eet-install ecore-install
$(BUILDROOT)/edje/stamps/dependencies: $(BUILDROOT)/embryo/stamps/install $(BUILDROOT)/evas/stamps/install $(BUILDROOT)/evil/stamps/install $(BUILDROOT)/eina/stamps/install $(BUILDROOT)/eet/stamps/install $(BUILDROOT)/ecore/stamps/install
	$(V)mkdir -p $(BUILDROOT)/edje/stamps
	touch $(BUILDROOT)/edje/stamps/dependencies

edje-clean:
	if test -d $(BUILDROOT)/edje/compile; then chmod -R u+w $(BUILDROOT)/edje/compile; fi
	rm -fr $(BUILDROOT)/edje/compile
	rm -fr $(BUILDROOT)/edje/stamps

$(BUILDROOT)/edje/stamps/autogen: $(SRCROOT)/edje/autogen.sh $(SRCROOT)/edje/configure.ac
	$(V)echo "Running 'autogen.sh' for edje..."
	$(V)rm -f $(BUILDROOT)/edje/stamps/autogen
	cd $(SRCROOT)/edje && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/edje/stamps
	touch $(BUILDROOT)/edje/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for edje."

$(BUILDROOT)/edje/stamps/configure: $(BUILDROOT)/edje/stamps/autogen $(BUILDROOT)/edje/stamps/dependencies
	$(V)echo "Configuring edje..."
	$(V)rm -f $(BUILDROOT)/edje/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/edje/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/edje/compile && \
	$(SRCROOT)/edje/configure --prefix=$(INSTALLROOT) --enable-tests \
		--enable-doc
	$(V)mkdir -p $(BUILDROOT)/edje/stamps
	touch $(BUILDROOT)/edje/stamps/configure
	$(V)echo "Success configuring edje."

$(BUILDROOT)/edje/stamps/compile: $(BUILDROOT)/edje/stamps/configure edje-compile
edje-compile: $(BUILDROOT)/edje/stamps/configure
	$(V)echo "Compiling edje..."
	$(V)rm -f $(BUILDROOT)/edje/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/edje/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/edje/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/edje/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/edje/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/edje/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/edje/compile;\
	else\
		echo "edje is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/edje/stamps/compile -o -f $(BUILDROOT)/edje/stamps/compile-updated; then\
		touch $(BUILDROOT)/edje/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling edje."

$(BUILDROOT)/edje/stamps/install: $(BUILDROOT)/edje/stamps/compile edje-install
edje-install: $(BUILDROOT)/edje/stamps/compile
	$(V)echo "Installing edje..."
	$(V)if test ! -f $(BUILDROOT)/edje/stamps/install -o $(BUILDROOT)/edje/stamps/compile -nt $(BUILDROOT)/edje/stamps/install; then\
		rm -f $(BUILDROOT)/edje/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/edje/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/edje/compile;\
		mkdir -p $(BUILDROOT)/edje/stamps;\
		touch $(BUILDROOT)/edje/stamps/install;\
	else\
		echo "edje did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing edje."

$(BUILDROOT)/edje/stamps/test: $(BUILDROOT)/edje/stamps/compile edje-test
edje-test: $(BUILDROOT)/edje/stamps/compile
	$(V)echo "Testing (make check) edje..."
	$(V)rm -f $(BUILDROOT)/edje/stamps/test
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) check -C $(BUILDROOT)/edje/compile
	$(V)mkdir -p $(BUILDROOT)/edje/stamps
	touch $(BUILDROOT)/edje/stamps/test
	$(V)echo "Success testing (make check) edje."

$(BUILDROOT)/edje/stamps/doc: $(BUILDROOT)/edje/stamps/compile edje-doc
edje-doc: $(BUILDROOT)/edje/stamps/compile
	$(V)echo "Generating documentation (make doc) edje..."
	$(V)rm -f $(BUILDROOT)/edje/stamps/doc
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) doc -C $(BUILDROOT)/edje/compile
	$(V)mkdir -p $(BUILDROOT)/edje/stamps
	touch $(BUILDROOT)/edje/stamps/doc
	$(V)echo "Success generating documentation (make doc) edje."

$(BUILDROOT)/edje/stamps/distcheck: $(BUILDROOT)/edje/stamps/compile edje-distcheck
edje-distcheck: $(BUILDROOT)/edje/stamps/compile
	$(V)echo "Checking distribution edje..."
	$(V)rm -f $(BUILDROOT)/edje/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/edje/compile
	$(V)mkdir -p $(BUILDROOT)/edje/stamps
	touch $(BUILDROOT)/edje/stamps/distcheck
	$(V)echo "Success checking distribution edje."

edje-direct-users-compile: python-edje-compile

edje-all-users-compile: python-edje-compile

########################################################################
# python-edje rules
python-edje-dependencies: $(BUILDROOT)/python-edje/stamps/dependencies edje-install python-evas-install
$(BUILDROOT)/python-edje/stamps/dependencies: $(BUILDROOT)/edje/stamps/install $(BUILDROOT)/python-evas/stamps/install
	$(V)mkdir -p $(BUILDROOT)/python-edje/stamps
	touch $(BUILDROOT)/python-edje/stamps/dependencies

python-edje-clean:
	if test -d $(BUILDROOT)/python-edje/compile; then chmod -R u+w $(BUILDROOT)/python-edje/compile; fi
	rm -fr $(BUILDROOT)/python-edje/compile
	rm -fr $(BUILDROOT)/python-edje/stamps

$(BUILDROOT)/python-edje/stamps/autogen: $(SRCROOT)/BINDINGS/python/python-edje/autogen.sh $(SRCROOT)/BINDINGS/python/python-edje/configure.ac
	$(V)echo "Running 'autogen.sh' for python-edje..."
	$(V)rm -f $(BUILDROOT)/python-edje/stamps/autogen
	cd $(SRCROOT)/BINDINGS/python/python-edje && NOCONFIGURE=1 ./autogen.sh
	$(V)mkdir -p $(BUILDROOT)/python-edje/stamps
	touch $(BUILDROOT)/python-edje/stamps/autogen
	$(V)echo "Success running 'autogen.sh' for python-edje."

$(BUILDROOT)/python-edje/stamps/configure: $(BUILDROOT)/python-edje/stamps/autogen $(BUILDROOT)/python-edje/stamps/dependencies
	$(V)echo "Configuring python-edje..."
	$(V)rm -f $(BUILDROOT)/python-edje/stamps/configure
	$(V)mkdir -p $(BUILDROOT)/python-edje/compile
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	cd $(BUILDROOT)/python-edje/compile && \
	$(SRCROOT)/BINDINGS/python/python-edje/configure --prefix=$(INSTALLROOT) 
	$(V)mkdir -p $(BUILDROOT)/python-edje/stamps
	touch $(BUILDROOT)/python-edje/stamps/configure
	$(V)echo "Success configuring python-edje."

$(BUILDROOT)/python-edje/stamps/compile: $(BUILDROOT)/python-edje/stamps/configure python-edje-compile
python-edje-compile: $(BUILDROOT)/python-edje/stamps/configure
	$(V)echo "Compiling python-edje..."
	$(V)rm -f $(BUILDROOT)/python-edje/stamps/compile-updated
	$(V)mkdir -p $(BUILDROOT)/python-edje/stamps
	$(V)if make --dry-run $(MAKEOPTS) all -C $(BUILDROOT)/python-edje/compile 2>/dev/null | grep -e 'libtool ' >/dev/null 2>/dev/null; then\
		touch $(BUILDROOT)/python-edje/stamps/compile-updated;\
	fi
	$(V)if test -f $(BUILDROOT)/python-edje/stamps/compile-updated; then\
		echo "make $(MAKEOPTS) all -C $(BUILDROOT)/python-edje/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) all -C $(BUILDROOT)/python-edje/compile;\
	else\
		echo "python-edje is up to date.";\
	fi
	$(V)if test ! -f $(BUILDROOT)/python-edje/stamps/compile -o -f $(BUILDROOT)/python-edje/stamps/compile-updated; then\
		touch $(BUILDROOT)/python-edje/stamps/compile;\
		echo "Compile updated, needs reinstall.";\
	fi
	$(V)echo "Success compiling python-edje."

$(BUILDROOT)/python-edje/stamps/install: $(BUILDROOT)/python-edje/stamps/compile python-edje-install
python-edje-install: $(BUILDROOT)/python-edje/stamps/compile
	$(V)echo "Installing python-edje..."
	$(V)if test ! -f $(BUILDROOT)/python-edje/stamps/install -o $(BUILDROOT)/python-edje/stamps/compile -nt $(BUILDROOT)/python-edje/stamps/install; then\
		rm -f $(BUILDROOT)/python-edje/stamps/install;\
		echo "make $(MAKEOPTS) install -C $(BUILDROOT)/python-edje/compile";\
		export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) install -C $(BUILDROOT)/python-edje/compile;\
		mkdir -p $(BUILDROOT)/python-edje/stamps;\
		touch $(BUILDROOT)/python-edje/stamps/install;\
	else\
		echo "python-edje did not change, not need to reinstall.";\
	fi
	$(V)echo "Success installing python-edje."

$(BUILDROOT)/python-edje/stamps/test: $(BUILDROOT)/python-edje/stamps/compile python-edje-test
python-edje-test: $(BUILDROOT)/python-edje/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/python-edje/stamps
	touch $(BUILDROOT)/python-edje/stamps/test
	$(V)echo 'No test target defined for python-edje'

$(BUILDROOT)/python-edje/stamps/doc: $(BUILDROOT)/python-edje/stamps/compile python-edje-doc
python-edje-doc: $(BUILDROOT)/python-edje/stamps/compile
	$(V)mkdir -p $(BUILDROOT)/python-edje/stamps
	touch $(BUILDROOT)/python-edje/stamps/doc
	$(V)echo 'No doc target defined for python-edje'

$(BUILDROOT)/python-edje/stamps/distcheck: $(BUILDROOT)/python-edje/stamps/compile python-edje-distcheck
python-edje-distcheck: $(BUILDROOT)/python-edje/stamps/compile
	$(V)echo "Checking distribution python-edje..."
	$(V)rm -f $(BUILDROOT)/python-edje/stamps/distcheck
	export PATH="$(INSTALLROOT)/bin:$${PATH}";\
	export PKG_CONFIG_PATH="$(INSTALLROOT)/lib/pkgconfig";\
	export CXXFLAGS="$${CXXFLAGS} -O2 -Wall -Wextra -Wshadow";\
	export CFLAGS="$${CFLAGS} -O2 -Wall -Wextra -Wshadow -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-shadow -Wno-strict-aliasing";\
	export LDFLAGS="$${LDFLAGS}";\
	make $(MAKEOPTS) distcheck -C $(BUILDROOT)/python-edje/compile
	$(V)mkdir -p $(BUILDROOT)/python-edje/stamps
	touch $(BUILDROOT)/python-edje/stamps/distcheck
	$(V)echo "Success checking distribution python-edje."

python-edje-direct-users-compile:

python-edje-all-users-compile:
